@tailwind base;
@tailwind components;
@tailwind utilities;
@import "animation.css";
@import "reactflow/dist/style.css";

@layer base {
  :root {
    --background: 0, 0%, 98%;
    --foreground: 162 5% 10%;
    --card: 162 50% 100%;
    --card-foreground: 162 5% 15%;
    --popover: 162 100% 100%;
    --popover-foreground: 162 100% 10%;
    --primary: 162 46.9% 9.6%;
    --primary-foreground: 0 0% 100%;
    --secondary: 162 30% 90%;
    --secondary-foreground: 0 0% 0%;
    --muted: 124 30% 95%;
    --muted-foreground: 162 5% 40%;
    --accent: 124 30% 90%;
    --accent-foreground: 162 5% 15%;
    --destructive: 0 100% 50%;
    --destructive-foreground: 162 5% 100%;
    --border: 162 30% 82%;
    --input: 162 30% 50%;
    --ring: 162 46.9% 9.6%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --color-1: 0 100% 63%;
    --color-2: 270 100% 63%;
    --color-3: 210 100% 63%;
    --color-4: 195 100% 63%;
    --color-5: 90 100% 63%;
  }
  .dark {
    --background: 162 50% 10%;
    --foreground: 162 5% 100%;
    --card: 162 50% 10%;
    --card-foreground: 162 5% 100%;
    --popover: 162 50% 5%;
    --popover-foreground: 162 5% 100%;
    --primary: 162 46.9% 9.6%;
    --primary-foreground: 0 0% 100%;
    --secondary: 162 30% 20%;
    --secondary-foreground: 0 0% 100%;
    --muted: 124 30% 25%;
    --muted-foreground: 162 5% 65%;
    --accent: 124 30% 25%;
    --accent-foreground: 162 5% 95%;
    --destructive: 0 100% 50%;
    --destructive-foreground: 162 5% 100%;
    --border: 162 30% 50%;
    --input: 162 30% 50%;
    --ring: 162 46.9% 9.6%;
    --radius: 0.5rem;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --color-1: 0 100% 63%;
    --color-2: 270 100% 63%;
    --color-3: 210 100% 63%;
    --color-4: 195 100% 63%;
    --color-5: 90 100% 63%;
  }

  /* Animation */
  *,
  *:after,
  *:before {
    box-sizing: border-box;
    color: inherit;
    font: inherit;
    outline-color: var(--accent);
  }

  html,
  [data-theme="light"] {
    color-scheme: light only;
  }

  body::before {
    --dot: color-mix(in lch, canvasText 25%, transparent);
    --size: 20px;
    content: "";
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: radial-gradient(var(--dot) 1px, transparent 1px) 0 0 /
        var(--size) var(--size),
      radial-gradient(var(--dot) 0px, transparent 1px) calc(var(--size) / 2)
        calc(var(--size) / 2) / var(--size) var(--size);
    /* mask: linear-gradient(0deg, transparent 60%, #fafafa); */
    top: 0;
    z-index: -1;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }
  .open {
    position: fixed;
    top: 1rem;
    right: 1rem;
  }

  .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }

  .open svg {
    rotate: calc(var(--intent, 0) * 180deg);
    transition: rotate 0.25s linear;
  }

  .details {
    display: grid;
    gap: 0 0.5rem;
    place-items: center;
    justify-content: start;
    grid-template: 1fr 1fr / auto 1fr;
    margin-bottom: 0.5em;
  }

  .details :is(a, span) {
    justify-self: start;
  }

  .details span {
    align-self: end;
    font-weight: 600;
  }
  .details a {
    align-self: start;
    text-decoration: none;
  }

  .details img {
    border-radius: 50%;
    grid-row: span 2;
  }

  header a svg path {
    transform-box: fill-box;
    transform-origin: center;
  }
  header a:is(:hover, :focus-visible) svg path {
    transition: translate 0.25s var(--easing);
  }

  header a svg path:first-of-type {
    translate: calc(-150% + (var(--intent, 0) * 150%))
      calc(150% - (var(--intent, 0) * 150%));
  }
  header a svg path:last-of-type {
    translate: calc(var(--intent, 0) * 150%) calc(var(--intent, 0) * -150%);
  }
  label {
    padding-block: 6px;
  }

  .switch {
    cursor: pointer;
    display: inline-block;
    border: 1px solid color-mix(in lch, currentColor, transparent);
    width: 24px;
    height: 16px;
    border-radius: 100px;
    justify-self: end;
    position: relative;
  }

  .switch:has(input:focus-visible) {
    outline: 2px solid var(--accent);
    outline-offset: 2px;
  }

  .switch:has(:checked)::after {
    background: var(--accent);
    translate: 8px 0;
  }

  .switch::after {
    background: currentColor;
    content: "";
    position: absolute;
    left: 0;
    top: 0%;
    height: 100%;
    aspect-ratio: 1;
    border-radius: 50%;
    transition: background 0.2s var(--easing), translate 0.2s var(--easing);
  }

  ::view-transition-new(root) {
    animation: reveal 1s;
    clip-path: inset(0 0 0 0);
    z-index: 2;
  }
  ::view-transition-old(root) {
    z-index: -1;
    animation: none;
  }
  @keyframes reveal {
    from {
      clip-path: inset(var(--from));
    }
  }

  [data-theme="dark"] {
    --from: 0 0 100% 0;
  }
  [data-theme="light"] {
    --from: 100% 0 0 0;
  }
  [data-theme="system"] {
    --from: 0 100% 0 0;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer visit {
  :root {
    --speed: calc(var(--duration) * 1s);
    --accent: hsl(6 90% 50%);
    --bounce-out: linear(
      0 0%,
      0.5583 3.72%,
      0.9549 7.72%,
      1.0968 9.86%,
      1.2039 12.13%,
      1.2783 14.57%,
      1.3213 17.23%,
      1.3317 18.7%,
      1.3345 20.27%,
      1.3296 21.97%,
      1.3171 23.83%,
      1.2806 27.25%,
      1.1551 36.58%,
      1.096 41.71%,
      1.0465 47.53%,
      1.014 53.68%,
      0.997 59.87%,
      0.9899 67.32%,
      1 100%
    );
    --easing: linear(
      0 0%,
      0.0027 3.64%,
      0.0106 7.29%,
      0.0425 14.58%,
      0.0957 21.87%,
      0.1701 29.16%,
      0.2477 35.19%,
      0.3401 41.23%,
      0.5982 55.18%,
      0.7044 61.56%,
      0.7987 68.28%,
      0.875 75%,
      0.9297 81.25%,
      0.9687 87.5%,
      0.9922 93.75%,
      1 100%
    );
    accent-color: var(--accent);
  }
  dialog {
    --present: 0;
    scale: calc(var(--scale) + ((1 - var(--scale)) * var(--present)));
    opacity: var(--present);
    filter: blur(calc((var(--blur) * (1 - var(--present))) * 1px));
    translate: 0 calc(calc(var(--translate) * 1lh) * (1 - var(--present)));
    width: 40ch;
    min-height: 100px;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.08), 0px 1px 1px rgba(0, 0, 0, 0.02),
      0px 4px 8px -4px rgba(0, 0, 0, 0.04),
      0px 16px 24px -8px rgba(0, 0, 0, 0.06);
    border-radius: 6px;
    color: color-mix(in lch, canvasText, canvas 20%);
    border: 1px solid color-mix(in lch, canvas, canvasText 10%);
    padding: 1rem;
    font-size: 14px;
    margin: auto;
    display: grid;
    gap: 0.5rem;
    transition: all var(--speed) var(--easing) allow-discrete,
      /*       display var(--speed) var(--easing) allow-discrete,
      scale var(--speed) var(--easing),
      opacity var(--speed) var(--easing),
      filter var(--speed) var(--easing), */
        translate calc(var(--speed) * calc(1 + var(--present)))
        var(--move, var(--easing));
    /**
    * This is the "magic" piece
    * transition: display var(--speed) allow-discrete, overlay var(--speed) allow-discrete;
    * or transition-behavior: allow-discrete;
    * it acts like a hold animation so you can do whatever you want as long as that's on
    */
  }
  dialog[open] {
    --present: 1;
    --move: var(--bounce-out);
  }
  @starting-style {
    dialog[open] {
      --present: 0;
    }
  }

  /* ::backdrop if required */
  :root:has(#backdrop:checked) {
    --drop: 1;
  }
  dialog::backdrop {
    --present: 0;
    background-color: color-mix(in lch, canvas, transparent 80%);
    backdrop-filter: blur(4px);
    opacity: calc(var(--present) * var(--drop, 0));
    transition: overlay var(--speed) var(--easing) allow-discrete,
      opacity var(--speed) var(--easing);
  }
  dialog[open]::backdrop {
    --present: 1;
  }
  @starting-style {
    dialog[open]::backdrop {
      --present: 0;
    }
  }
}
.loader {
  width: 90px;
  height: 14px;
  box-shadow: 0 3px 0 #fff;
  position: relative;
  display: grid;
  clip-path: inset(-60px 0 -5px);
}

.loader:after {
  content: "";
  position: relative;
  background: repeating-linear-gradient(
      90deg,
      #0000 0 calc(50% - 8px),
      #ccc 0 calc(50% + 8px),
      #0000 0 100%
    )
    0 0 / calc(100% / 3) 100%;
  animation: l6-1 1s infinite;
}
.loader:before {
  content: "";
  position: absolute;
  width: 14px;
  aspect-ratio: 1;
  left: calc(50% - 7px);
  bottom: 0;
  border-radius: 50%;
  background: rgb(50, 52, 53);
  animation: l6-2 1s infinite;
}
@keyframes l6-1 {
  50%,
  100% {
    background-position: calc(100% / 2) 0;
  }
}
@keyframes l6-2 {
  0%,
  50% {
    transform: translateY(-80px);
  }
}

/* react-flow__panel react-flow__attribution bottom right {
  display: none;
} */

/* .page.sidebar-3-page::after {
  content: "";
  position: fixed;
  z-index: 0;
  inset: 0;
  background: rgb(0 0 0 / 15%);
} */

.sidebar-3 {
  position: fixed;
  z-index: 2;
  top: 0;
  left: 0;
  bottom: 0;
  /* top: 20px;
  left: 20px;
  bottom: 20px; */
  /* border-radius: 8px; */
  width: 60px;
  /* background: rgb(0 0 0 / 10%); */
  background-color: #0d241d;
  /* backdrop-filter: blur(2px); */
  border: 0;
  transition: width 0.45s;
}

.sidebar-3 .material-symbols-outlined {
  font-size: 20px;
}

.sidebar-3.open {
  width: 190px;
}

.sidebar-3 .inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 190px;
}

.sidebar-3 header {
  display: flex;
  align-items: center;
  height: 64px;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
  padding: 0 6px;
}

.sidebar-3-burger {
  width: 44px;
  height: 72px;
  display: grid;
  place-items: center;
}

.sidebar-3 nav {
  display: grid;
  padding: 0 7px;
  /* display: flex;
  flex-direction: column;
  align-items: center; */
  gap: 8px;
}

.sidebar-3 nav > button {
  display: flex;
  gap: 12px;
  align-items: center;
  height: 44px;
  width: 44px;
  line-height: 1;
  padding: 0 12px;
  border-radius: 8px;
  /* opacity: 0.1; */
  transition: width 0.5s;
  background-color: #bcebc710;
  /* color: #f9f9f9; */
}

.sidebar-3 nav > button:hover {
  background-color: #bcebc740;
  opacity: 1;
}

.sidebar-3:not(.open) nav > button:hover p {
  opacity: 1;
  background: rgb(0 0 0 / 80%);
  padding: 4px 8px;
  border-radius: 6px;
  translate: 10px 0;
  min-width: max-content;
}

.sidebar-3 header > img,
.sidebar-3 nav > button p {
  opacity: 0;
  transition: 0.25s;
}

.sidebar-3.open :is(nav button p, header > img) {
  opacity: 1;
}

.sidebar-3.open nav > button {
  width: 100%;
}

.react-flow__panel.react-flow__attribution.bottom.right {
  display: none;
  visibility: hidden;
}
